mtc-cordump will make a still image of a MySQL instance with coordinated
point-in-time informations regarding to all preceding instances.

Why:

  In some cases, MySQL replication was utilized for distributed read or
  non-blocking backup or anything else, and someone want the information of the
  whole replication chain.

  For e.g., there is a replication chain like this:

    N1 <- N2 <- N3 <- N4   (N3 replicate from N2, etc...)

  If one dump from N3, he maybe needs the log sequence information of N1, N2 and
  N3 when the dump happened on N3, in order to restore the dumped data to any
  server on the upstream of the chain, maybe restore the whole database. With
  this information one can do more things than without it.

DEFINITION:

  The syntax is specified using Extended Backus-Naur Form (EBNF):
  
  mtc-cordump [ Options ] Nid { Nid } .
  Nid         = `"` NidParams { "," NidParams } `"` .
  NidParams   = ("h=" | "P=" | "u=" | "p=") string | "." .


  With optional options provided, one can specify a leaf Nid which represent the
  network information of a MySQL node, and the dump will be made from this
  node. Other upstream Nids can also be optionally provided from bottom to
  root(root node's Nid is not required actually), mainly for instance access if
  the login account for leaf Nid cannot be applied to them, but data will never
  be taken from those nodes.

Requirement:

  - Login account should at least have:
      SUPER, REPLICATION CLIENT, PROCESS
    privileges globally.
  - Nodes in the chain should be capable of tolerate a little replication gap.
  - The dumping node can be froze until dump is complete.

How it works:

  This tools works by connecting to every MySQL nodes on the chain, stop the
  sql_thread of every nodes except the root node, then grab a random
  MASTER_LOG_POS, and let the child node in the chain catch up to this position
  by starting sql_thread until the specific MASTER_LOG_POS, then record the
  MASTER_LOG_POS of this child node in order to apply to next child node in the
  chain, then resume the sql_thread of this node completely. And etc ... etc,
  when the leaf node was treated at last, the whole chain was coordinated.

  This tool requires no lock at all, because a global READ LOCK is very
  expensive, we should avoid it as mush as possible. This tool will cause a
  little replication gap among nodes in the chain while this tool was
  negotiating(caused by stopping slave's sql_thread), user's discretion is
  advised.

  Take the example above:
  
    N1 <- N2 <- N3 <- N4   (N3 replicate from N2, etc...)

  If we trying to make a coordinated dump from N3, then we can issue:

    mtc-cordump [ Options ] N3_Nid N2_Nid          # root Nid is not required

  With the login informations of N3 and N2 and some proper privilege setups on
  them, mtc-cordump can obtain the dump with point-in-time binlog positions of
  every preceding instances, like:

    N1: mysql-bin.000005 48471238 "2011-09-12 12:32:49"
    N2: mysql-bin.000023 12389772 "2011-09-12 19:21:43"
    N3: mysql-bin.000001 21383457 "2011-09-12 08:11:53"

  In which case, one can restore this backup with binlog positions respective to
  each server in chain.


Examples:

  - make a dump with one upstream server's Nid:

      mtc-cordump "h=remote1,P=3306,u=rpl,p=xxx" "h=remote2,u=rpl2,p=xxxx"

  - make a dump, set coordination height to 2(height 2 means only the
  server to dump plus it's parent master, if height is set to 1, then no parent
  nodes' info will be recorded):

      mtc-cordump --height=2 "h=remote1,P=3306,u=rpl,p=xxx"

  - make a dump, set coordination height to 3. Here only two Nid was specified,
    the 3rd's Nid will be gathered from instance info from 2nd node and using
    login info defaults to 1st Nid(here 3rd's Nid's user and password will be
    defaults to 1st Nid which user name is "rpl" not "rpl2"):

      mtc-cordump --height=3 "h=remote1,P=3306,u=rpl,p=xxx" \
                             "h=remote2,u=rpl2,p=xxxx"

  - make a dump, use "." to skip node(which is 2nd and 3rd nodes and they will
    use login info from 1st node):
    
      mtc-cordump --height=4 "h=remote1,P=3306,u=rpl,p=xxx" . . \
                             "h=remote2,u=rpl2,p=xxxx"

  - make a dump, all upstream servers should be coordinated, with same account
    settings:
  
      mtc-cordump "h=remote1,P=3306,u=rpl,p=xxx"

